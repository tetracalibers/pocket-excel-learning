---
import { type FnArgument } from "../../content/config"

interface Props {
  name: string
  args: FnArgument[]
  coloring?: boolean
}

const { name, args, coloring = false } = Astro.props

const hues = coloring ? args.map((_, i) => i * (360 / args.length) + "deg") : []

const repeatGroup = (() => {
  const restStartIdx = args.findIndex((arg) => arg.multiple)
  if (restStartIdx === -1) return []

  const rest = args.slice(restStartIdx)
  if (rest.length === 0) return []

  return Array.from({ length: 2 }, (_, i) =>
    rest.map((arg, j) => ({
      ...arg,
      summary: `${arg.summary}${i + 1}`,
      hue: hues[restStartIdx + j]
    }))
  )
})()

const argsList: (FnArgument & { hue: string })[] = [
  ...args.filter((arg) => !arg.multiple).map((arg, i) => ({ ...arg, hue: hues[i] })),
  ...repeatGroup.flat()
]
---

<code class="siguneture text-lg pb-2">
  <span>{name}</span>
  <span>(</span>
  <div class:list={["arguments", { coloring }]}>
    {
      argsList.map((arg) => (
        <span class="argument" style={arg.hue ? `--hue: ${arg.hue}` : ""}>
          <span class="summary">{arg.summary}</span>
        </span>
      ))
    }
    {repeatGroup.length > 0 && <span class="argument">...</span>}
  </div>
  <div>)</div>
</code>

<style>
  .siguneture {
    font-family: var(--font-code);
    font-weight: var(--font-weight-code);

    display: flex;

    overflow-x: auto;
    overflow-y: hidden;

    white-space: nowrap;
  }

  .arguments {
    display: contents;
  }

  .argument:not(:last-child)::after {
    content: ",";
    display: contents;
  }

  .coloring .summary {
    --marker-color: hsl(var(--hue), 100%, 95%);
    background: linear-gradient(rgba(255, 255, 255, 0) 40%, var(--marker-color) 70%);
  }
</style>
