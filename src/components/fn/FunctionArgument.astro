---
import type { FnArgument } from "@/content/config"

interface Props {
  args: FnArgument[]
}

const { args } = Astro.props

const hues = args.map((_, i) => i * (360 / args.length) + "deg")
---

<div class="grid auto-cols-[minmax(0,max-content)] gap-x-8 gap-y-4 pb-8 leading-loose text-sm">
  {
    args.map((arg, i) => (
      <div class="pt-4 px-4 gap-x-8 gap-y-4 grid grid-cols-subgrid sm:col-span-2">
        <div>
          <span class="text-base whitespace-nowrap _arg-name" style={`--hue: ${hues[i]}`}>
            {arg.summary}
          </span>
          {(arg.optional || arg.default) && <span>（省略可能）</span>}
        </div>
        {arg.detail && <p class="pl-4">{arg.detail}</p>}
        {arg.pattern && (
          <ul class="ml-4 pb-2 list-disc whitespace-nowrap overflow-x-auto w-fit grid auto-cols-[minmax(auto,max-content)] max-w-full">
            {arg.pattern.map((p) => (
              <li class="grid grid-cols-subgrid col-span-2 gap-4">
                <div>
                  <span class="text-base min-w-[2ch] inline-block text-end _value">{p.value}</span>
                  {p.value === arg.default && <span>（デフォルト）</span>}
                </div>
                <div>{p.behavior}</div>
              </li>
            ))}
          </ul>
        )}
      </div>
    ))
  }
</div>

<style>
  ._arg-name {
    font-family: var(--font-code);
    font-weight: var(--font-weight-code);

    background: linear-gradient(rgba(255, 255, 255, 0) 40%, hsl(var(--hue), 100%, 95%) 70%);
  }
  ._value {
    font-family: var(--font-code);
    font-weight: var(--font-weight-code);
  }
</style>
